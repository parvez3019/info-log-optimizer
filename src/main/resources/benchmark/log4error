# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/olx/Library/Java/JavaVirtualMachines/corretto-17.0.10/Contents/Home/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.github.parvez3019.benchmark.LoggerBenchmark.customLoggerBenchmark

# Run progress: 0.00% complete, ETA 00:00:16
# Fork: 1 of 2
# Warmup Iteration   1: SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
9240.613 ops/s
# Warmup Iteration   2: 9226.603 ops/s
# Warmup Iteration   3: 8225.539 ops/s
Iteration   1: 9371.129 ops/s
Iteration   2: 250.984 ops/s
Iteration   3: 807.988 ops/s
Iteration   4: 181.415 ops/s
Iteration   5: 26.768 ops/s

# Run progress: 50.00% complete, ETA 00:00:14
# Fork: 2 of 2
# Warmup Iteration   1: SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
12162.434 ops/s
# Warmup Iteration   2: 9347.663 ops/s
# Warmup Iteration   3: 9919.250 ops/s
Iteration   1: 3067.066 ops/s
Iteration   2: 1124.574 ops/s
Iteration   3: 210.449 ops/s
Iteration   4: 31.699 ops/s
Iteration   5: 58.735 ops/s


Result "io.github.parvez3019.benchmark.LoggerBenchmark.customLoggerBenchmark":
  1513.081 ±(99.9%) 4404.720 ops/s [Average]
  (min, avg, max) = (26.768, 1513.081, 9371.129), stdev = 2913.450
  CI (99.9%): [≈ 0, 5917.801] (assumes normal distribution)


# Run complete. Total time: 00:00:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt     Score      Error  Units
LoggerBenchmark.customLoggerBenchmark  thrpt   10  1513.081 ± 4404.720  ops/s
